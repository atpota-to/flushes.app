"use strict";(()=>{var e={};e.id=79,e.ids=[79],e.modules={92885:e=>{e.exports=require("@supabase/supabase-js")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},52624:(e,t,o)=>{o.r(t),o.d(t,{originalPathname:()=>y,patchFetch:()=>w,requestAsyncStorage:()=>m,routeModule:()=>p,serverHooks:()=>E,staticGenerationAsyncStorage:()=>f});var r={};o.r(r),o.d(r,{GET:()=>g,dynamic:()=>i,fetchCache:()=>d});var a=o(49303),l=o(88716),s=o(60670),n=o(87070),u=o(92885);let i="force-dynamic",d="force-no-store",c=process.env.NEXT_PUBLIC_SUPABASE_URL||"",D=process.env.SUPABASE_SERVICE_ROLE_KEY||"",h=["\uD83D\uDEBD","\uD83E\uDDFB","\uD83D\uDCA9","\uD83D\uDCA8","\uD83D\uDEBE","\uD83E\uDDFC","\uD83E\uDEA0","\uD83D\uDEBB","\uD83E\uDE78","\uD83D\uDCA7","\uD83D\uDCA6","\uD83D\uDE0C","\uD83D\uDE23","\uD83E\uDD22","\uD83E\uDD2E","\uD83E\uDD74","\uD83D\uDE2E‍\uD83D\uDCA8","\uD83D\uDE33","\uD83D\uDE35","\uD83C\uDF3E","\uD83C\uDF66","\uD83D\uDCF1","\uD83D\uDCD6","\uD83D\uDCAD","1️⃣","2️⃣","\uD83D\uDFE1","\uD83D\uDFE4"];async function g(e){try{let e="did:plc:fouf3svmcxzn6bpiw3lgwz22",t=[e,"did:plc:fnhrjbkwjiw6iyxxg2o3rljw"],o=["plumber.flushes.app","plumber.flushing.im","testing.dame.is"];if(!c||!D)return n.NextResponse.json({totalCount:42,flushesPerDay:3.5,chartData:function(){let e=[],t=new Date;for(let o=29;o>=0;o--){let r=new Date(t);r.setDate(r.getDate()-o);let a=`${r.getFullYear()}-${String(r.getMonth()+1).padStart(2,"0")}-${String(r.getDate()).padStart(2,"0")}`,l=Math.floor(5*Math.random())+1;e.push({date:a,count:l})}return e}(),leaderboard:["did:plc:mock1","did:plc:mock2","did:plc:mock3","did:plc:mock4","did:plc:mock5","did:plc:mock6","did:plc:mock7","did:plc:mock8","did:plc:mock9","did:plc:mock10"].map((e,t)=>({did:e,count:10-t})),plumberFlushCount:15,totalFlushers:28,monthlyActiveFlushers:18,dailyActiveFlushers:5.2,emojiStats:h.slice(0,20).map((e,t)=>({emoji:e,count:Math.floor(20*Math.random())+(20-t)})).sort((e,t)=>t.count-e.count)});{let r=(0,u.createClient)(c,D);console.log("Fetching total flush count from database...");let a=null;try{console.log("Trying count method 1: standard count query");let{count:e,error:t}=await r.from("flushing_records").select("*",{count:"exact",head:!0});if(t)throw t;null!==e&&(console.log(`Method 1 returned count: ${e}`),a=e)}catch(e){console.error("Count method 1 failed:",e)}try{console.log("Trying count method 2: getting highest ID");let{data:e,error:t}=await r.from("flushing_records").select("id").order("id",{ascending:!1}).limit(1);if(!t&&e&&e.length>0){let t=Number(e[0].id);console.log(`Highest ID in database: ${t}`),null!==a&&t>1.2*a&&console.warn(`Warning: Highest ID (${t}) is much higher than count (${a})`)}}catch(e){console.error("Count method 2 failed:",e)}try{console.log("Trying count method 3: fetching and counting all IDs");let{data:e,error:t}=await r.from("flushing_records").select("id");if(!t&&e){let t=e.length;console.log(`Method 3 returned count: ${t}`),(null===a||t>a)&&(console.log(`Updating count from ${a} to ${t} from method 3`),a=t)}}catch(e){console.error("Count method 3 failed:",e)}null===a&&(console.warn("All count methods failed, defaulting to 0"),a=0),console.log(`Final total count: ${a}`);let{data:l,error:s}=await r.from("flushing_records").select("created_at, did, handle, emoji").order("created_at",{ascending:!0});if(s)throw Error(`Failed to get daily data: ${s.message}`);let i=new Map;l?.forEach(e=>{let t=new Date(e.created_at),o=`${t.getFullYear()}-${String(t.getMonth()+1).padStart(2,"0")}-${String(t.getDate()).padStart(2,"0")}`;i.has(o)?i.set(o,(i.get(o)||0)+1):i.set(o,1)});let d=Array.from(i.entries()).map(([e,t])=>({date:e,count:t})).sort((e,t)=>e.date.localeCompare(t.date)),g=0;if(d.length>0&&null!==a){let e=d.length;g=parseFloat(((a||0)/e).toFixed(1))}let p=new Date;p.setDate(p.getDate()-30);let m=l?.filter(e=>new Date(e.created_at)>=p),f=new Set;m?.forEach(e=>{let r=e.did&&t.includes(e.did),a=e.handle&&"string"==typeof e.handle&&o.includes(e.handle);!e.did||r||a||f.add(e.did)});let E=f.size;console.log(`Monthly Active Flushers (last 30 days): ${E}`);let y=new Map;m?.forEach(e=>{if(!e.did)return;let r=t.includes(e.did),a=e.handle&&"string"==typeof e.handle&&o.includes(e.handle);if(r||a)return;let l=new Date(e.created_at),s=`${l.getFullYear()}-${String(l.getMonth()+1).padStart(2,"0")}-${String(l.getDate()).padStart(2,"0")}`;y.has(s)||y.set(s,new Set),y.get(s).add(e.did)});let w=0;if(y.size>0){let e=Array.from(y.values()).reduce((e,t)=>e+t.size,0);w=parseFloat((e/y.size).toFixed(1))}console.log(`Daily Active Flushers (average over last 30 days): ${w}`),w>E&&(console.error(`Warning: Daily active flushers avg (${w}) exceeds monthly active flushers (${E}). This should not happen.`),w=parseFloat(Math.min(E,w).toFixed(1)),console.log(`Correcting daily active flushers to ${w}`));let{data:$,error:C}=await r.from("flushing_records").select("did, handle").order("created_at",{ascending:!1});if(C)throw Error(`Failed to get leaderboard data: ${C.message}`);let F=new Map,v=0;$?.forEach(r=>{r.did===e||"plumber.flushes.app"===r.handle||"plumber.flushing.im"===r.handle?v++:t.includes(r.did)||r.handle&&o.includes(r.handle)||F.set(r.did,(F.get(r.did)||0)+1)});let A=Array.from(F.entries()).map(([e,t])=>({did:e,count:t})).sort((e,t)=>t.count-e.count).slice(0,10),b=F.size;if(console.log(`Total unique flushers: ${b}`),E>b){console.error(`Warning: Monthly active flushers (${E}) exceeds total flushers (${b}). This should never happen.`);let e=Math.min(b,E);console.log(`Correcting monthly active flushers from ${E} to ${e}`),E=e}console.log("Collecting emoji statistics...");let S=new Map;l?.forEach(e=>{if(e.emoji){let t=e.emoji.trim()||"\uD83D\uDEBD";h.includes(t)?S.set(t,(S.get(t)||0)+1):S.set("\uD83D\uDEBD",(S.get("\uD83D\uDEBD")||0)+1)}else S.set("\uD83D\uDEBD",(S.get("\uD83D\uDEBD")||0)+1)});let x=Array.from(S.entries()).map(([e,t])=>({emoji:e,count:t})).sort((e,t)=>t.count-e.count);return console.log(`Collected stats for ${x.length} different emojis`),n.NextResponse.json({totalCount:a,flushesPerDay:g,chartData:d.slice(-30),leaderboard:A,plumberFlushCount:v,totalFlushers:b,monthlyActiveFlushers:E,dailyActiveFlushers:w,emojiStats:x})}}catch(e){return console.error("Error fetching stats:",e),n.NextResponse.json({error:"Failed to fetch stats",message:e.message},{status:500})}}let p=new a.AppRouteRouteModule({definition:{kind:l.x.APP_ROUTE,page:"/api/bluesky/stats/route",pathname:"/api/bluesky/stats",filename:"route",bundlePath:"app/api/bluesky/stats/route"},resolvedPagePath:"/Users/dame/Library/Mobile Documents/com~apple~CloudDocs/Software/flushes/app/src/app/api/bluesky/stats/route.ts",nextConfigOutput:"standalone",userland:r}),{requestAsyncStorage:m,staticGenerationAsyncStorage:f,serverHooks:E}=p,y="/api/bluesky/stats/route";function w(){return(0,s.patchFetch)({serverHooks:E,staticGenerationAsyncStorage:f})}}};var t=require("../../../../webpack-runtime.js");t.C(e);var o=e=>t(t.s=e),r=t.X(0,[276,972],()=>o(52624));module.exports=r})();